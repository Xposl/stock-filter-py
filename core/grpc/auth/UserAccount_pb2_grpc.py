# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from core.grpc.auth import UserAccount_pb2 as auth_dot_UserAccount__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in auth/UserAccount_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class UserAccountServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.queryUserAccountById = channel.unary_unary(
                '/UserAccountService/queryUserAccountById',
                request_serializer=auth_dot_UserAccount__pb2.UserAccountIdRequest.SerializeToString,
                response_deserializer=auth_dot_UserAccount__pb2.UserAccountResponse.FromString,
                _registered_method=True)
        self.queryUserAccountByIds = channel.unary_unary(
                '/UserAccountService/queryUserAccountByIds',
                request_serializer=auth_dot_UserAccount__pb2.UserAccountIdsRequest.SerializeToString,
                response_deserializer=auth_dot_UserAccount__pb2.UserAccountsResponse.FromString,
                _registered_method=True)
        self.validOrregisterUserAccount = channel.unary_unary(
                '/UserAccountService/validOrregisterUserAccount',
                request_serializer=auth_dot_UserAccount__pb2.UserAccountValidRequest.SerializeToString,
                response_deserializer=auth_dot_UserAccount__pb2.UserAccountResponse.FromString,
                _registered_method=True)
        self.logoutUserInfo = channel.unary_unary(
                '/UserAccountService/logoutUserInfo',
                request_serializer=auth_dot_UserAccount__pb2.UserAccountLogoutRequest.SerializeToString,
                response_deserializer=auth_dot_UserAccount__pb2.UserAccountLogoutResponse.FromString,
                _registered_method=True)


class UserAccountServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def queryUserAccountById(self, request, context):
        """*
        根据用户id查询用户账户信息
        如果参数中包含clientId，则查询用户账户信息时会同时查询用户在该clientId下的账户信息
        如果参数中不包含clientId，则只会返回user的数据
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def queryUserAccountByIds(self, request, context):
        """*
        根据用户id列表查询用户账户信息
        如果参数中包含clientId，则查询用户账户信息时会同时查询用户在该clientId下的账户信息
        如果参数中不包含clientId，则只会返回user的数据
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def validOrregisterUserAccount(self, request, context):
        """*
        校验或注册用户账户, 用于特殊场景下创建新的用户账户
        如果用户不存在，则注册用户 
        如果用户存在，则校验用户
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def logoutUserInfo(self, request, context):
        """*
        注销用户账号
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserAccountServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'queryUserAccountById': grpc.unary_unary_rpc_method_handler(
                    servicer.queryUserAccountById,
                    request_deserializer=auth_dot_UserAccount__pb2.UserAccountIdRequest.FromString,
                    response_serializer=auth_dot_UserAccount__pb2.UserAccountResponse.SerializeToString,
            ),
            'queryUserAccountByIds': grpc.unary_unary_rpc_method_handler(
                    servicer.queryUserAccountByIds,
                    request_deserializer=auth_dot_UserAccount__pb2.UserAccountIdsRequest.FromString,
                    response_serializer=auth_dot_UserAccount__pb2.UserAccountsResponse.SerializeToString,
            ),
            'validOrregisterUserAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.validOrregisterUserAccount,
                    request_deserializer=auth_dot_UserAccount__pb2.UserAccountValidRequest.FromString,
                    response_serializer=auth_dot_UserAccount__pb2.UserAccountResponse.SerializeToString,
            ),
            'logoutUserInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.logoutUserInfo,
                    request_deserializer=auth_dot_UserAccount__pb2.UserAccountLogoutRequest.FromString,
                    response_serializer=auth_dot_UserAccount__pb2.UserAccountLogoutResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'UserAccountService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('UserAccountService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class UserAccountService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def queryUserAccountById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/UserAccountService/queryUserAccountById',
            auth_dot_UserAccount__pb2.UserAccountIdRequest.SerializeToString,
            auth_dot_UserAccount__pb2.UserAccountResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def queryUserAccountByIds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/UserAccountService/queryUserAccountByIds',
            auth_dot_UserAccount__pb2.UserAccountIdsRequest.SerializeToString,
            auth_dot_UserAccount__pb2.UserAccountsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def validOrregisterUserAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/UserAccountService/validOrregisterUserAccount',
            auth_dot_UserAccount__pb2.UserAccountValidRequest.SerializeToString,
            auth_dot_UserAccount__pb2.UserAccountResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def logoutUserInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/UserAccountService/logoutUserInfo',
            auth_dot_UserAccount__pb2.UserAccountLogoutRequest.SerializeToString,
            auth_dot_UserAccount__pb2.UserAccountLogoutResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
