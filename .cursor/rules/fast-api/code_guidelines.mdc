---
description: 
globs: api/**
alwaysApply: false
---
# FastAPI 编码规范

## 概述

本文档项目基于FastAPI的开发提供编码规范和最佳实践，基于项目的特定架构和业务特点，旨在确保代码的一致性、可读性和可维护性。

## 项目架构规范

### 三层架构设计 (Entity-Repository-Handler)

⚠️ **重要澄清**: 本三层架构**仅适用于数据库表相关操作**，与Agent代码实现是两个不同的架构概念。Agent实现基于PocketFlow框架，采用独立的代码包结构。

本项目严格遵循三层架构模式，确保**数据库相关**代码的分层清晰、职责明确：

### ✅ **正确的分层设计原则**

#### 数据库层架构 (Entity-Repository-Handler)
1. **Entity层**: 纯数据模型，不包含任何业务逻辑和外部依赖
2. **Repository层**: 纯数据访问，不包含业务逻辑，只负责CRUD操作
3. **Handler层**: 包含所有业务逻辑、参数验证、流程控制
4. **Router层**: 只负责HTTP请求处理、参数绑定、响应格式化
5. **Service层**: 业务逻辑的Service层，类似handler,如果无法用entity名称描述的服务在这里处理

#### Agent代码包架构 (PocketFlow)
1. **Agent目录**: `app/agents/agents/[agent_name]/` - 每个Agent独立目录
2. **通用节点**: `app/agents/nodes.py` - 共享的通用节点实现
3. **Agent配置**: 通过`__init__.py`中的`AGENT_CONFIG`导出
4. **数据库访问**: Agent通过Repository或Handler访问数据库，**禁止**直接访问database_service

⚠️ **关键区别**: 
- **数据库架构**针对数据表操作，确保数据访问规范
- **Agent架构**针对AI逻辑实现，基于PocketFlow框架
- **两者互不冲突**，Agent需要数据库时通过Repository/Handler访问

#### 系统环境变量的读取
所有变量通过 **[config.py](mdc:app/config.py)** 完成引入，**禁止**直接通过os.getenv读取

## 通用编码风格

- **PEP 8**: 遵循 [PEP 8 -- Style Guide for Python Code](mdc:https:/www.python.org/dev/peps/pep-0008)。
- **Linters 和 Formatters**: 推荐使用 `Flake8` (或 `Pylint`) 进行代码风格检查，使用 `Black` 和 `isort` 进行代码格式化和导入排序。
    - **配置示例 (`pyproject.toml` for Black and isort):**
      ```toml
      [tool.black]
      line-length = 88
      target-version = ['py38', 'py39', 'py310', 'py311'] # 根据项目 Python 版本调整

      [tool.isort]
      profile = "black"
      line_length = 88
      ```
- **类型提示**: 强制使用类型提示 (Type Hinting)，并使用 `mypy`进行静态类型检查。
    - **示例:**
      ```python
      from fastapi import FastAPI
      from pydantic import BaseModel
      from typing import Optional, Dict, Any

      app = FastAPI()

      class ChatMessage(BaseModel):
          content: str
          conversation_id: str
          model_config: Optional[Dict[str, Any]] = None

      @app.post("/conversations/{conversation_id}/messages")
      async def send_message(
          conversation_id: str, 
          message: ChatMessage
      ) -> Dict[str, Any]:
          return {"message_id": "123", "status": "success"}
      ```
- **命名约定**:
    - **变量和函数名**: `snake_case` (例如: `conversation_id`, `get_chat_response`)
    - **类名**: `PascalCase` (例如: `QwenClient`, `ChatService`, `ConversationManager`)
    - **常量**: `UPPER_SNAKE_CASE` (例如: `MAX_CONTEXT_LENGTH`, `QWEN_API_TIMEOUT`)
    - **模块和包名**: `snake_case` (例如: `qwen_client`, `chat_service`, `auth_middleware`)
- **文档字符串 (Docstrings)**: 为所有公共模块、函数、类和方法编写清晰的文档字符串。推荐使用 Google 风格。
    - **示例 (Google 风格):**
      ```python
      async def get_conversation_history(
          conversation_id: str, 
          limit: int = 50
      ) -> List[models.Message]:
          """获取对话历史记录.

          Args:
              conversation_id: 对话ID
              limit: 返回消息数量限制，默认50条

          Returns:
              消息列表，按时间倒序排列

          Raises:
              HTTPException: 当对话不存在或无权限时抛出
          """
          return await message_service.get_messages(conversation_id, limit)
      ```
- **注释**: 只为复杂或不明显的代码段添加注释。代码本身应尽可能自解释。


