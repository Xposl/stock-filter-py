---
description: 
globs: core/ai_agents/**
alwaysApply: false
---
# PocketFlow 集成规范指南

## 概述

本文档基于 [PocketFlow 官方文档](mdc:https:/github.com/the-pocket/PocketFlow) 和 [PocketFlow Cursor 教程](mdc:https:/github.com/The-Pocket/Tutorial-Cursor) 制定，用于规范 InvestNote-py 项目中 AI 模块与 PocketFlow 框架的正确集成。

## PocketFlow 核心架构

PocketFlow 是一个100行的轻量级 LLM 框架，提供三个核心抽象：

### 1. Node（节点）
```python
from pocketflow import Node
from typing import Dict, Any, Tuple

class ExampleNode(Node):
    def prep(self, shared: Dict[str, Any]) -> Any:
        """准备阶段：从共享存储中提取和预处理数据"""
        # 从共享存储获取输入数据
        data = shared.get("input_data")
        return data
    
    def exec(self, inputs: Any) -> Any:
        """执行阶段：实际的业务逻辑处理"""
        # 执行核心逻辑
        result = process_data(inputs)
        return result
    
    def post(self, shared: Dict[str, Any], prep_res: Any, exec_res: Any) -> str:
        """后处理阶段：更新共享存储并返回下一个节点名称"""
        # 将结果存储到共享存储
        shared["result"] = exec_res
        return "next_node_name"  # 返回下一个要执行的节点名称
```

### 2. Flow（流程）
```python
from pocketflow import Flow

# 创建节点实例
node1 = ExampleNode()
node2 = AnotherNode()
finish_node = FinishNode()

# 使用连接语法定义流程
node1 - "success" >> node2
node1 - "error" >> finish_node
node2 - "done" >> finish_node

# 创建流程
flow = Flow(start=node1)

# 执行流程
result = flow.run({"input_data": "some data"})
```

### 3. 共享存储（Shared Store）
- 所有节点共享的字典存储
- 用于在节点间传递数据和状态
- 节点通过 `prep` 方法读取，通过 `post` 方法写入

**✅ 正确的PocketFlow实现**：
```python
from pocketflo create_news_analysis_flow():
    # 创建节点实例
    classifier = NewsClassifierNode()
    stock_analyzer = StockAnalyzerNode()
    industry_analyzer = IndustryAnalyzerNode()
    investment_advisor = InvestmentAdvisorNode()
    
    # 定义流程连接
    classifier - "stock_specific" >> stock_analyzer
    classifier - "industry_focused" >> industry_analyzer
    stock_analyzer - "analyzed" >> investment_advisor
    industry_analyzer - "analyzed" >> investment_advisor
    
    # 创建并返回流程
    return Flow(start=classifier)

# 使用流程
flow = create_news_analysis_flow()
result = flow.run({
    "article": article_data,
    "analysis_params": {...}
})
```

## 最佳实践

### 1. 节点设计最佳实践
- **单一职责**：每个节点只做一件事
- **无状态设计**：节点不应保存状态，所有状态通过共享存储传递
- **错误处理**：在 `post` 方法中处理错误，返回错误处理节点名称

### 2. Flow设计最佳实践
- **清晰的分支逻辑**：使用描述性的连接条件名称
- **错误处理路径**：为每个节点定义错误处理路径
- **流程可视化**：使用注释描述流程图

### 3. 共享存储最佳实践
- **标准化数据格式**：定义清晰的数据结构
- **避免数据污染**：使用命名空间避免键名冲突
- **类型安全**：使用类型提示确保数据类型正确

## 参考资源

- @PocketFlow GitHub
- @PocketFlow Cursor T