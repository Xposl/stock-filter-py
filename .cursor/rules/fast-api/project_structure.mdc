---
description: 
globs: 
alwaysApply: true
---
# FastAPI 项目结构规范

## 概述

本文档定义了 InvestNote-py FastAPI 项目的实际目录结构，基于投资笔记与分析系统的业务需求，包含新闻聚合、AI分析、量化指标等模块。

## InvestNote-py 实际目录结构

```
.
├── main.py                           # 项目主入口，服务器启动配置
├── api/                             # API 层
│   ├── __init__.py
│   ├── api.py                       # FastAPI 应用实例入口，基础路由和中间件
│   ├── models.py                    # API 请求/响应模型
│   └── routers/                     # 路由模块目录，按功能拆分的路由定义
│       ├── ticker.py               # 股票相关路由（分页查询、详情查看）
│       ├── news.py                 # 新闻相关路由（文章查询、新闻源管理）
│       └── scheduler.py            # 🔄 已更新：统一定时任务路由（股票更新、新闻抓取、调度器管理）
├── core/                            # 核心业务逻辑层
│   ├── models/                      # 数据库模型层 (SQLAlchemy)
│   │   ├── __init__.py
│   │   ├── api_log.py              # API日志模型
│   │   ├── ticker.py               # 股票基础信息模型
│   │   ├── ticker_indicator.py     # 股票技术指标模型
│   │   ├── ticker_score.py         # 股票评分模型
│   │   ├── ticker_strategy.py      # 投资策略模型
│   │   ├── ticker_valuation.py     # 股票估值模型
│   │   ├── news_source.py          # 新闻源配置模型
│   │   └── news_article.py         # 新闻文章模型
│   ├── service/                     # 数据访问层 (Repository Pattern)
│   │   ├── __init__.py
│   │   ├── ticker_repository.py    # 股票数据仓储
│   │   ├── ticker_indicator_repository.py
│   │   ├── ticker_score_repository.py
│   │   ├── ticker_strategy_repository.py
│   │   ├── ticker_valuation_repository.py
│   │   └── api_log_repository.py
│   ├── handler/                     # 业务处理层
│   │   ├── __init__.py
│   │   ├── ticker_handler.py       # 股票数据处理
│   │   ├── ticker_analysis_handler.py # 股票分析处理
│   │   ├── ticker_score_handler.py
│   │   ├── ticker_strategy_handler.py
│   │   ├── ticker_valuation_handler.py
│   │   ├── ticker_indicator_handler.py
│   │   ├── ticker_k_line_handler.py
│   │   └── ticker_filter_handler.py
│   ├── data_providers/              # 🆕 统一股票数据提供者层
│   │   ├── __init__.py
│   │   ├── stock_data_provider.py  # 统一数据提供者抽象接口
│   │   ├── akshare_provider.py     # AKShare数据提供者 (优先级最高)
│   │   ├── xueqiu_provider.py      # 雪球数据提供者 (补充数据源)
│   │   └── stock_data_factory.py   # 策略模式数据源工厂
│   ├── utils/                       # 工具函数层
│   │   ├── xueqiu/                 # 🆕 雪球数据访问抽象层
│   │   │   ├── __init__.py
│   │   │   ├── xueqiu_base_client.py    # 雪球基础客户端抽象类
│   │   │   ├── xueqiu_news_client.py    # 雪球新闻客户端 (继承基类)
│   │   │   ├── xueqiu_stock_client.py   # 雪球股票客户端 (继承基类)
│   │   │   ├── xueqiu_client_factory.py # 雪球客户端工厂
│   │   │   ├── xueqiu_api.py           # 🔄 重构后的雪球API (使用抽象层)
│   │   │   ├── xueqiu_company.py       # 雪球公司信息模型
│   │   │   └── xueqiu_stock_quote.py   # 雪球股票报价模型
│   │   └── ...                     # 其他工具函数
│   ├── news_aggregator/             # 新闻聚合模块
│   │   ├── __init__.py
│   │   ├── rss_aggregator.py       # RSS新闻聚合器
│   │   ├── xueqiu_aggregator.py    # 🔄 重构后的雪球聚合器 (使用抽象层)
│   │   └── news_aggregator_manager.py
│   ├── ai_agents/                   # AI代理模块
│   │   └── __init__.py
│   ├── quantitative_analyzer/       # 量化分析模块 (新增)
│   │   └── __init__.py
│   ├── database/                    # 数据库操作工具
│   │   ├── db_adapter.py           # 数据库适配器 (MySQL/PostgreSQL/SQLite)
│   ├── auth/                        # 认证授权模块
│   │   ├── auth_middleware.py      # 认证中间件
│   │   └── auth_grpc_client.py     # gRPC认证客户端
│   ├── grpc/                        # gRPC相关
│   │   └── auth/                   # 认证服务Proto定义
│   ├── analysis/                    # 股票分析模块
│   ├── strategy/                    # 投资策略模块
│   ├── indicator/                   # 技术指标模块
│   ├── valuation/                   # 估值模块
│   ├── score/                       # 评分模块
│   ├── filter/                      # 筛选模块
│   ├── schema/                      # 数据Schema定义
│   ├── enum/                        # 枚举定义
│   └── data_source_helper.py        # 数据源辅助类
├── workers/                         # 异步任务工作进程 (新增)
│   └── __init__.py
├── scripts/                         # 开发运行脚本
│   └── crontab                     # 🔄 已更新：统一定时任务配置（股票+新闻）
├── tests/                           # 测试代码
├── proto/                           # Protobuf定义文件
├── sql/                           # SQL脚本
├── memory-bank/                   # Memory Bank系统
├── invest_note.py                 # CLI工具入口
├── requirements.txt               # Python依赖
├── .env                           # 环境变量配置
├── docker-compose.yaml            # Docker编排配置
├── deploy.sh                      # 🔄 已更新：部署脚本（自动更新crontab）
├── Dockerfile                     # Docker镜像配置
└── README.md                      # 项目说明

```

### **数据提供者层** (`core/data_providers/`)

InvestNote-py采用统一的数据提供者架构，实现多数据源智能管理：

#### 1. **统一抽象接口** 
- **[stock_data_provider.py](mdc:core/data_providers/stock_data_provider.py)**: 定义标准化股票数据访问接口
- 支持多市场（A股、港股、美股、英股）
- 统一的数据周期和错误处理
- 优先级管理和自动降级机制

#### 2. **AKShare数据提供者** (优先级: 100)
- **[akshare_provider.py](mdc:core/data_providers/akshare_provider.py)**: 基于akshare库的主要数据源
- 覆盖股票信息、实时行情、历史数据、公司信息、股票搜索
- 自动市场检测和股票代码标准化
- 完整的A股、港股、美股支持
- 相关文档通过 mcp context7查询

#### 3. **雪球数据提供者** (优先级: 50)  
- **[xueqiu_provider.py](mdc:core/data_providers/xueqiu_provider.py)**: 作为AKShare的补充数据源
- 使用重构后的雪球客户端抽象层
- 提供同步和异步操作接口

#### 4. **策略工厂管理**
- **[stock_data_factory.py](mdc:core/data_providers/stock_data_factory.py)**: 实现策略模式
- 智能数据源选择和自动降级
- 错误计数和可用性监控
- 全局工厂实例和便捷函数

### **雪球数据抽象层** (`core/utils/xueqiu/`)

完全重构的雪球数据访问层，消除代码重复，实现职责分离：

#### 1. **基础抽象客户端**
- **[xueqiu_base_client.py](mdc:core/utils/xueqiu/xueqiu_base_client.py)**: 统一的基础客户端
- 会话管理、令牌获取（pyppeteer + urllib备用）、HTTP请求封装
- 同步/异步接口、错误处理和重试机制

#### 2. **专业化客户端**
- **[xueqiu_news_client.py](mdc:core/utils/xueqiu/xueqiu_news_client.py)**: 新闻聚合专用客户端
  - 继承基础客户端，专注新闻时间线数据
  - 股票符号提取、重要性评分、内容过滤
- **[xueqiu_stock_client.py](mdc:core/utils/xueqiu/xueqiu_stock_client.py)**: 股票数据专用客户端
  - 继承基础客户端，专注股票行情和公司信息
  - 支持A股（SH/SZ）、港股（HK）、美股多市场

#### 3. **客户端工厂**
- **[xueqiu_client_factory.py](mdc:core/utils/xueqiu/xueqiu_client_factory.py)**: 统一客户端创建和管理
- 配置共享、会话管理、类型安全的客户端创建

## 架构层次说明

### 1. **API 层** (`api/`)
- **[api.py](mdc:api/api.py)**: FastAPI应用实例入口，基础路由和中间件，路由模块注册
- **[models.py](mdc:api/models.py)**: API请求和响应的Pydantic模型定义
- **[routers/](mdc:api/routers)**: 路由模块目录，按功能拆分的路由定义
  - **[ticker.py](mdc:api/routers/ticker.py)**: 股票相关路由（分页查询、详情查看）
  - **[news.py](mdc:api/routers/news.py)**: 新闻相关路由（文章查询、新闻源管理）
  - **[scheduler.py](mdc:api/routers/scheduler.py)**: 调度器相关路由（股票更新、新闻抓取、调度器管理）
- **特点**: 模块化路由设计，职责分离，向后兼容的API端点

### 2. **核心业务层** (`core/`)

#### 2.1 **数据模型层** (`core/models/`)
- 使用SQLAlchemy定义所有数据库表结构
- 按业务领域组织：股票、新闻、用户、日志等
- 包含数据模型的属性访问器和业务方法

#### 2.2 **数据访问层** (`core/service/`)
- 实现Repository模式，封装数据库操作
- 每个主要实体对应一个Repository类
- 提供CRUD操作和复杂查询方法
- 与SQLAlchemy ORM交互

#### 2.3 **业务处理层** (`core/handler/`)
- 封装特定领域的业务逻辑
- 协调多个Repository进行复杂业务操作
- 处理数据转换和业务规则验证
- 被API层调用执行具体业务功能

#### 2.4 **🆕 数据提供者层** (`core/data_providers/`)
- 统一的股票数据访问抽象层
- 策略模式管理多数据源（AKShare优先，雪球补充）
- 智能降级和错误处理
- 支持多市场股票数据获取

#### 2.5 **新增AI/新闻模块**
- **`news_aggregator/`**: 新闻数据抓取和处理（已集成雪球抽象层）
- **`ai_agents/`**: AI代理框架，多Agent协作分析
- **`nlp_utils/`**: 自然语言处理工具
- **`opportunity_detector/`**: 投资机会识别算法
- **`quantitative_analyzer/`**: 量化分析工具

### 3. **支撑系统**

#### 3.1 **认证系统** (`core/auth/`)
- gRPC客户端连接外部认证服务
- 中间件实现请求认证和授权
- 支持基于角色的访问控制

#### 3.2 **任务队列** (`workers/`)
- Celery异步任务执行
- 处理耗时的数据分析和新闻处理任务

#### 3.3 **Memory Bank系统** (`memory-bank/`)
- 项目上下文管理
- 开发进度跟踪
- 技术文档维护

## 🆕 数据流转模式 (更新)

### HTTP API数据流
```
HTTP请求 → api.py → Handler → Repository → SQLAlchemy → 数据库
          ↓
     Pydantic验证 → 业务逻辑处理 → 数据持久化 → HTTP响应
```

### 股票数据获取流
```
业务请求 → StockDataFactory → 数据源选择 → AKShare/雪球Provider → 数据标准化 → 业务返回
                ↓
         智能降级策略 → 错误计数 → 自动切换 → 可用性监控
```

### 雪球数据访问流
```
业务请求 → XueqiuClientFactory → 客户端选择 → XueqiuBaseClient → 令牌管理 → HTTP请求
                ↓                     ↓
         NewsClient/StockClient → 专业化处理 → 数据解析 → 结构化返回
```

## 命名约定

### 文件命名
- **模型文件**: `{entity}.py` (如 `ticker.py`, `news_article.py`)
- **Repository文件**: `{entity}_repository.py` (如 `ticker_repository.py`)
- **Handler文件**: `{entity}_{function}_handler.py` (如 `ticker_analysis_handler.py`)
- **🆕 Provider文件**: `{source}_provider.py` (如 `akshare_provider.py`)
- **🆕 Client文件**: `{source}_{type}_client.py` (如 `xueqiu_stock_client.py`)

### 类命名
- **数据模型**: `{Entity}` (如 `Ticker`, `NewsArticle`)
- **Repository类**: `{Entity}Repository` (如 `TickerRepository`)
- **Handler类**: `{Entity}{Function}Handler` (如 `TickerAnalysisHandler`)
- **🆕 Provider类**: `{Source}Provider` (如 `AKShareProvider`)
- **🆕 Client类**: `{Source}{Type}Client` (如 `XueqiuNewsClient`)

### 方法命名
- **Repository方法**: `get_`, `create_`, `update_`, `delete_`, `find_by_`
- **Handler方法**: 反映具体业务操作，如 `calculate_score`, `analyze_trend`
- **🆕 Provider方法**: `get_stock_info`, `get_stock_quote`, `get_stock_history`, `search_stocks`
- **🆕 Router方法**: 使用HTTP动词前缀，如 `get_`, `post_`, `put_`, `delete_`

## 模块依赖关系

- **API路由模块** → **Handler层** → **Repository层** → **Model层**
- **API主应用** → **路由模块注册** → **中间件处理** → **异常记录**
- **Handler层** → **DataProvider层** → **ExternalAPI层**
- **DataProvider层** → **雪球抽象层** → **雪球基础客户端**
- **新闻模块** → **AI代理** → **NLP工具** → **机会检测**
- **认证模块** 为所有层提供横切关注点
- **Memory Bank** 独立维护项目上下文

## API模块化建议

- **路由拆分**: 按业务功能拆分路由模块，保持单一职责
- **向后兼容**: 拆分时保持API端点路径不变
- **共享依赖**: 通过依赖注入共享Repository和Handler实例
- **错误处理**: 统一的异常处理和日志记录机制
- **文档标签**: 使用FastAPI tags组织API文档结构
- **模块导入**: 新路由模块需在主应用中注册

### **统一定时任务管理** (`api/routers/scheduler.py`) 🔄 已更新

InvestNote-py采用统一的定时任务管理架构，集中管理所有后台调度任务：

#### 1. **股票数据更新任务**
- **从ticker.py迁移**: `/cron/ticker/{market}/update` 路由已迁移到scheduler.py
- **市场支持**: A股(zh)、港股(hk)、美股(us)三大市场
- **批量处理**: 每批100只股票，批次间隔1分钟
- **后台执行**: 使用FastAPI BackgroundTasks异步处理

#### 2. **新闻抓取任务**
- **定时抓取**: `/cron/news` 支持全量和指定源抓取
- **调度管理**: 启动/停止调度器，查看任务状态
- **手动触发**: `/cron/news/manual` 支持手动触发新闻抓取

#### 3. **统一crontab配置** (`scripts/crontab`) 🔄 已更新
```bash
# 股票数据更新
0 6 * * 2-6    # 美股：每周二到周六早上6点
10 15 * * 1-5  # A股：每周一到周五下午3点10分
10 17 * * 1-5  # 港股：每周一到周五下午5点10分

# 新闻抓取
0 6,12,18,22 * * *    # 工作日：每天4次
0 10,20 * * 6,7       # 周末：每天2次
```

#### 4. **自动化部署** (`deploy.sh`) 🔄 已更新
- **Docker容器重启**: 支持指定版本的自动部署
- **crontab自动更新**: 部署时自动覆盖旧的定时任务
- **健康检查**: 容器状态和API健康检查
- **备份恢复**: 自动备份旧crontab，支持回滚

### **架构优势**

#### 1. **职责分离优势**
- **ticker.py**: 专注股票数据查询和展示API
- **scheduler.py**: 统一管理所有定时任务和后台调度
- **news.py**: 专注新闻数据查询和源管理
- **清晰分工**: 避免路由职责混淆，提高可维护性

#### 2. **运维管理优势**
- **统一监控**: 所有定时任务在scheduler.py中统一管理
- **自动部署**: deploy.sh确保crontab与代码版本同步
- **错误处理**: 统一的异常处理和日志记录
- **状态查询**: 提供调度器状态和任务执行情况查询

#### 3. **扩展性优势**
- **新增任务**: 新的定时任务统一在scheduler.py中添加
- **配置管理**: crontab文件统一管理所有定时规则
- **版本控制**: 定时任务配置与代码版本同步管理
