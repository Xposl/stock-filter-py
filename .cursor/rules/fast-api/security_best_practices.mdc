---
description: 
globs: 
alwaysApply: false
---
# FastAPI 安全最佳实践

## 概述

本文档概述了在开发 FastAPI 应用程序时应遵循的关键安全最佳实践，以保护应用程序免受常见漏洞的威胁。

## 1. 输入验证 (Input Validation)

- **Pydantic 强制验证**: FastAPI 通过 Pydantic 模型自动对请求体、查询参数、路径参数和头部进行数据验证。务必为所有输入数据定义严格的 Pydantic 模型。
    - **明确类型**: 为所有字段指定确切的数据类型 (e.g., `int`, `str`, `float`, `bool`, `datetime`)。
    - **约束**: 使用 Pydantic 的约束条件，如 `min_length`, `max_length`, `gt`, `lt`, `regex` 等。
    - **`Enum`**: 对可接受值有限的字段使用 `Enum`。
    - **自定义验证器**: 对复杂业务规则使用 `@field_validator` 或 `@model_validator`。
- **示例**:
  ```python
  from fastapi import FastAPI, Query, Path
  from pydantic import BaseModel, EmailStr, Field
  from enum import Enum

  class UserRole(str, Enum):
      admin = "admin"
      user = "user"

  class Item(BaseModel):
      name: str = Field(..., min_length=3, max_length=50)
      description: str | None = Field(None, max_length=300)
      price: float = Field(..., gt=0)
      email: EmailStr # 自动验证邮件格式
      role: UserRole = UserRole.user
  ```
- **避免信任任何输入**: 始终假设外部输入是不可信的，并进行彻底验证。

## 2. 认证 (Authentication)

- **选择合适的机制**: 根据需求选择认证方案，例如：
    - **OAuth2 (Password Flow, Bearer Tokens)**: FastAPI 内置了对 OAuth2 的良好支持，通常用于需要用户凭证的 API。
    - **API Keys**: 用于服务器到服务器的通信或第三方集成。
    - **JWT (JSON Web Tokens)**: 常与 OAuth2 Bearer Tokens 一起使用，用于创建自包含的、可验证的令牌。
- **FastAPI 安全工具**: 使用 `fastapi.security` 模块 (e.g., `OAuth2PasswordBearer`, `APIKeyHeader`) 来简化认证实现。
- **密码安全**:
    - **哈希存储**: 绝不以明文存储密码。使用强大的哈希算法（如 `bcrypt` 或 `Argon2`）配合 `salt` 来存储密码哈希。
    - **`passlib`**: 推荐使用 `passlib` 库进行密码哈希和验证。
- **令牌管理**:
    - **短生命周期**: 令牌（尤其是访问令牌）应具有合理的短生命周期。
    - **HTTPS**: 始终通过 HTTPS 传输令牌。
    - **安全存储**: 客户端应安全地存储令牌 (例如，HTTPOnly cookies for web, Secure Storage for mobile)。

## 3. 授权 (Authorization)

- **定义角色和权限**: 实现基于角色 (RBAC) 或基于声明的授权机制。
- **依赖注入**: 使用 FastAPI 的依赖注入系统来检查用户权限。
  ```python
  from fastapi import Depends, HTTPException, status
  from fastapi.security import OAuth2PasswordBearer

  oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

  async def get_current_active_admin_user(token: str = Depends(oauth2_scheme)):
      user = await get_user_from_token(token) # 假设这个函数会验证令牌并返回用户
      if not user or not user.is_admin:
          raise HTTPException(
              status_code=status.HTTP_403_FORBIDDEN,
              detail="Not authorized to perform this action",
          )
      return user

  @app.post("/admin/items/", dependencies=[Depends(get_current_active_admin_user)])
  async def create_admin_item(item: Item):
      # ... 只有管理员能访问
      return item
  ```
- **细粒度权限**: 根据需要实现对特定资源或操作的细粒度访问控制。

## 4. 输出编码和内容安全

- **FastAPI 自动处理**: FastAPI 默认将响应序列化为 JSON，并设置正确的 `Content-Type` 头部 (`application/json`)，这有助于防止某些类型的注入攻击（如 XSS，如果响应被错误地解释为 HTML）。
- **避免直接返回 HTML/JavaScript**: 如果必须返回 HTML，确保对用户提供的数据进行严格的转义，以防止 XSS。考虑使用模板引擎 (如 Jinja2) 并利用其自动转义功能。
- **Content Security Policy (CSP)**: 如果你的 FastAPI 应用也服务前端内容，考虑设置 CSP 头部以减少 XSS 和其他注入攻击的风险。

## 5. HTTPS

- **始终使用 HTTPS**: 在生产环境中，所有 FastAPI 应用都应通过 HTTPS 提供服务。这可以保护数据在传输过程中的机密性和完整性。
- **反向代理**: 通常通过反向代理 (如 Nginx, Traefik, Caddy) 来处理 SSL/TLS 终止。

## 6. 依赖项管理

- **定期更新**: 保持所有依赖项（包括 FastAPI 本身、Pydantic、数据库驱动等）都是最新的，以获取安全补丁。
- **漏洞扫描**: 使用工具如 `safety` 或 GitHub Dependabot 来扫描项目依赖项中的已知漏洞。
  ```bash
  pip install safety
  safety check -r requirements.txt
  ```
- **最小权限原则**: 只安装项目实际需要的依赖项。

## 7. 错误处理和日志记录

- **不要泄露敏感信息**: 错误消息不应向客户端泄露敏感的内部信息（如堆栈跟踪、数据库错误详情、配置值）。FastAPI 默认在生产模式下（`debug=False`）不会发送详细的调试信息给客户端。
- **自定义异常处理器**: 可以捕获特定异常并返回通用的错误响应。
- **详细日志**: 在服务器端记录详细的错误信息（包括堆栈跟踪）以供调试，但确保日志中不包含敏感数据，或对敏感数据进行脱敏处理。
- **审计日志**: 对于关键操作（如登录、权限变更、重要数据修改），记录审计日志。

## 8. 中间件 (Middleware)

- **安全相关的中间件**: 可以使用中间件添加安全头部、进行速率限制等。
  - **`CORSMiddleware`**: 正确配置 CORS (Cross-Origin Resource Sharing) 以控制哪些源可以访问你的 API。
    ```python
    from fastapi.middleware.cors import CORSMiddleware

    app.add_middleware(
        CORSMiddleware,
        allow_origins=["https://example.com"], # 明确指定允许的源
        allow_credentials=True,
        allow_methods=["GET", "POST"], # 限制允许的方法
        allow_headers=["Authorization"], # 限制允许的头部
    )
    ```
  - **安全头部**: 添加如 `Strict-Transport-Security`, `X-Content-Type-Options`, `X-Frame-Options` 等头部。

## 9. 速率限制和防暴力破解

- **实现速率限制**: 防止滥用 API 和拒绝服务攻击。可以使用第三方库如 `slowapi`。
- **账户锁定**: 对登录尝试失败次数过多的账户实施临时锁定。

## 10. ORM/数据库安全

- **防止 SQL 注入**: 使用 ORM (如 SQLAlchemy, Tortoise ORM) 或参数化查询，避免直接将用户输入拼接到 SQL 语句中。
- **最小权限数据库用户**: API 连接数据库时使用的用户应具有完成其任务所需的最小权限。

## 11. Docker 和部署安全 (如果适用)

- **最小化镜像**: 使用官方或受信任的基础镜像，并只包含运行应用所需的组件。
- **非 root 用户**: 在 Docker 容器内以非 root 用户身份运行应用程序。
- **Secrets 管理**: 使用 Docker secrets, Kubernetes Secrets 或云提供商的秘密管理服务来管理敏感配置，而不是硬编码或放在环境变量中（尽管环境变量常用于非敏感配置）。

## 12. API 文档安全

- **保护 API 文档**: 如果 API 文档 (Swagger UI / ReDoc) 包含敏感信息或不应对外公开，可以对其进行保护（例如，通过 IP限制、认证等）。FastAPI 允许你通过参数配置文档 URL 或完全禁用它们。

## 结论

安全是一个持续的过程，而不是一次性的任务。定期进行安全审计、代码审查，并关注最新的安全威胁和 FastAPI 的安全更新，对于维护一个安全的应用程序至关重要。
