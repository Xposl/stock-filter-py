---
description: 
globs: 
alwaysApply: false
---
# Application Flow Guide

This project supports two main running modes:

## 1. API Service Mode (Recommended)
- Entry: [main.py](mdc:main.py) starts the FastAPI service and loads routes from [api.py](mdc:api.py).
- Main flow:
  1. Clients call APIs via HTTP requests.
  2. API routes invoke [data_source_helper.py](mdc:core/data_source_helper.py)'s `DataSourceHelper` for data orchestration.
  3. Data orchestration involves updating stock lists, fetching K-line data, and running strategy/indicator/scoring/valuation analysis, each via its handler submodule:
     - Stock list: [core/handler/ticker_handler.py](mdc:core/handler/ticker_handler.py)
     - K-line: [core/handler/ticker_k_line_handler.py](mdc:core/handler/ticker_k_line_handler.py)
     - Strategy: [core/handler/ticker_strategy_handler.py](mdc:core/handler/ticker_strategy_handler.py)
     - Indicator: [core/handler/ticker_indicator_handler.py](mdc:core/handler/ticker_indicator_handler.py)
     - Scoring: [core/handler/ticker_score_handler.py](mdc:core/handler/ticker_score_handler.py)
     - Valuation: [core/handler/ticker_valuation_handler.py](mdc:core/handler/ticker_valuation_handler.py)
     - Filtering: [core/handler/ticker_filter_handler.py](mdc:core/handler/ticker_filter_handler.py)
     - Analysis/Visualization: [core/handler/ticker_analysis_handler.py](mdc:core/handler/ticker_analysis_handler.py)
  4. Results are returned via API or written to the database/output directory.

## 2. Interactive/CLI Mode (Legacy)
- Entry: [invest_note.py](mdc:invest_note.py)
- Supports menu-driven interaction, batch analysis, and strategy backtesting. Also relies on core/handler and analysis modules.

## Data Flow & Call Chain
- `DataSourceHelper` is the central hub for data flow, connecting all handler submodules.
- Typical flow: Stock list update → K-line fetch → Strategy/Indicator/Scoring/Valuation analysis → Output/Visualization（for cli mode）.

